<!DOCTYPE html>
<html lang="en">
<head>
  <link rel="icon" href="https://th.bing.com/th/id/R.0d8ae648e1b69dddce23fabb9050633c?rik=F4x56IhVCprrLg&pid=ImgRaw&r=0">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat</title>
  <!-- Bootstrap CSS -->
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    /* Custom styles */
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
    }

    /* Light mode styles */
    body,
    .chat-container,
    .user-message .bubble,
    .bot-message .bubble {
      background-color: #f5f5f5;
      color: #333;
    }

    /* Dark mode styles */
    body.dark-mode,
    .chat-container.dark-mode,
    .user-message .bubble.dark-mode,
    .bot-message .bubble.dark-mode {
      background-color: #333;
      color: #fff;
    }
    .chat-container {
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0px 0px 15px rgba(0, 0, 0, 0.1);
      overflow-y: auto;
      min-height: 100vh;
    }
    .chat-container .message {
      margin-bottom: 10px;
      display: flex;
      flex-direction: row;
      align-items: flex-start;
    }
    .chat-container .user-message {
      justify-content: flex-end;
    }
    .chat-container .user-message .bubble {
      background-color: #007bff;
      color: #fff;
      border-radius: 10px;
      padding: 10px 15px;
      word-wrap: break-word;
    }
    .chat-container .bot-message .bubble {
      background-color: #4caf50;
      color: #fff;
      border-radius: 10px;
      padding: 10px 15px;
      word-wrap: break-word;
      max-width: 70%;
      overflow: auto;
    }
    .chat-container form {
      margin-top: 20px;
    }
    /* Textarea styling */
    .form-control {
      resize: none;
      overflow: hidden;
    }
    /* Icon styles */
    .user-icon {
      width: 30px;
      height: 30px;
      margin-right: 10px;
    }
    .bot-icon {
      width: 30px;
      height: 30px;
      margin-left: 10px;
    }
  </style>
</head>
<body>
  <div class="toggle-dark-mode" style="padding: 10px;">
    <input type="checkbox" id="darkModeToggle">
    <label for="darkModeToggle">Dark Mode</label>
  </div>
  <div class="chat-container">
    <!-- Chat header with bot icon -->
    <div class="d-flex align-items-center justify-content-center mb-3">
      <img src="https://th.bing.com/th/id/R.0d8ae648e1b69dddce23fabb9050633c?rik=F4x56IhVCprrLg&pid=ImgRaw&r=0" alt="User Icon" class="user-icon">
      <h5>Chat with comrade zeusman</h5>
    </div>
    <!-- Chat messages area -->
    <div id="chatMessages"></div>
    <!-- User input form -->
    <form id="userInputForm" class="mt-3">
      <div class="form-group">
        <textarea id="userInput" class="form-control" placeholder="Type your message"></textarea>
      </div>
      <div class="spinner-border text-primary d-none mt-3" role="status" id="loadingSpinner">
        <span class="sr-only">Loading...</span>
      </div><br>
      <button type="submit" class="btn btn-primary">Send</button>
    </form>
    <!-- Clear conversation button -->
    <button id="clearConversation" class="btn btn-danger mt-3">Clear Conversation</button>
    <audio id="audioPlayer" controls style="display: none;"></audio>

    <!-- Button to toggle speech synthesis -->
    <button id="toggleSpeechButton" class="btn btn-info mt-3">Disable Speech</button>
  </div>
 
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script>
    $(document).ready(function() {
  let isSpeechEnabled = true;

  function toggleSpeech() {
    isSpeechEnabled = !isSpeechEnabled;
    $('#toggleSpeechButton').text(isSpeechEnabled ? 'Disable Speech' : 'Enable Speech');
  }

  $('#toggleSpeechButton').click(function() {
    toggleSpeech();
  });

  function speakResponse(text) {
    if (isSpeechEnabled) {
      const apiKey = 'AIzaSyDtqm6Gcj-FBnQjlJq3V8SwktlXZQpX9iw'; 
      const endpoint = `https://texttospeech.googleapis.com/v1/text:synthesize?key=${apiKey}`;

      const requestData = {
        input: {
          text: text
        },
        voice: {
          languageCode: 'en-GB', // British English
    ssmlGender: 'FEMALE' // Female voice
        },
        audioConfig: {
          audioEncoding: 'MP3' // Replace with desired audio format
        }
      };

      $.ajax({
        type: 'POST',
        url: endpoint,
        contentType: 'application/json',
        data: JSON.stringify(requestData),
        success: function(data) {
          const audioContent = data.audioContent;
          const audioBlob = base64ToBlob(audioContent, 'audio/mpeg');
          const audioUrl = URL.createObjectURL(audioBlob);
          const audioPlayer = document.getElementById('audioPlayer');
          audioPlayer.src = audioUrl;
          audioPlayer.play();
        },
        error: function(xhr, status, error) {
          console.error('Error synthesizing speech:', error);
        }
      });
    }
  }

  function base64ToBlob(base64Data, contentType) {
    const sliceSize = 1024;
    const byteCharacters = atob(base64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
      const slice = byteCharacters.slice(offset, offset + sliceSize);
      const byteNumbers = new Array(slice.length);
      for (let i = 0; i < slice.length; i++) {
        byteNumbers[i] = slice.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      byteArrays.push(byteArray);
    }

    return new Blob(byteArrays, { type: contentType });
  }

  $('#userInputForm').submit(function(event) {
  event.preventDefault();
  const userInput = $('#userInput').val();
  $('#loadingSpinner').removeClass('d-none');

  $.ajax({
    type: 'POST',
    url: '/send-message',
    data: { userInput: userInput },
    success: function(response) {
      const formattedResponse = formatBotResponse(response);

      // Append bot's response after receiving it from the server
      $('#chatMessages').append(`
        <div class="message bot-message">
          <div class="bubble">${formattedResponse}</div>
          <img src="https://th.bing.com/th/id/R.0d8ae648e1b69dddce23fabb9050633c?rik=F4x56IhVCprrLg&pid=ImgRaw&r=0" alt="User Icon" class="user-icon">
        </div>
      `);

      // Append user's input above the bot's response
      const lastBotMessage = $('.message.bot-message:last');
      $(`
        <div class="message user-message">
          <div class="bubble">${userInput}</div>
          <img src="https://th.bing.com/th/id/R.8e2c571ff125b3531705198a15d3103c?rik=gzhbzBpXBa%2bxMA&riu=http%3a%2f%2fpluspng.com%2fimg-png%2fuser-png-icon-big-image-png-2240.png&ehk=VeWsrun%2fvDy5QDv2Z6Xm8XnIMXyeaz2fhR3AgxlvxAc%3d&risl=&pid=ImgRaw&r=0" alt="User Icon" class="user-icon">
        </div>
      `).insertBefore(lastBotMessage);

      $('#chatMessages').scrollTop($('#chatMessages')[0].scrollHeight);
      $('#userInput').val('');
      $('#loadingSpinner').addClass('d-none');
      
      speakBotReply(); // Trigger speech synthesis after appending bot's response
    },
    error: function() {
      $('#loadingSpinner').addClass('d-none');
    }
  });
});


  function speakBotReply() {
    const lastBotResponse = $('.message.bot-message:last-child .bubble').last().text();
    if (lastBotResponse) {
      speakResponse(lastBotResponse);
    }
  }

  function formatBotResponse(response) {
    let formattedResponse = '<div class="bubble">';
   
    const lines = response.split('\n'); // Split response into lines

    lines.forEach(line => {
      // Check if the line starts with a number followed by a dot (e.g., "1.")
      if (/^\d+\./.test(line.trim())) {
        formattedResponse += `<li>${line.trim()}</li>`; // Format as bulleted list item
      } else if (/^[a-zA-Z]+\./.test(line.trim())) {
        formattedResponse += `<li style="list-style-type: lower-alpha;">${line.trim()}</li>`; // Format as alphabetical list item
      } else {
        formattedResponse += `${line}<br>`; // Default formatting for regular text
      }
    });

    formattedResponse += '</div>';
    return formattedResponse;
  }

  $('#clearConversation').click(function() {
    $.ajax({
      type: 'POST',
      url: '/clear-conversation',
      success: function(response) {
        $('#chatMessages').empty();
        console.log(response);
      },
      error: function() {
        console.log('Error clearing conversation');
      }
    });
  });

  $('#darkModeToggle').change(function() {
    $('body').toggleClass('dark-mode');
    $('.chat-container, .user-message .bubble, .bot-message .bubble').toggleClass('dark-mode');
  });
});

  </script>
</body>
</html>
